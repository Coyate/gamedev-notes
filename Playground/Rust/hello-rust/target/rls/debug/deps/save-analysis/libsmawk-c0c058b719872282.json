{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1","program":"C:\\Users\\Miyu\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","smawk","--edition=2018","C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=c0c058b719872282","-C","extra-filename=-c0c058b719872282","--out-dir","c:\\Users\\Miyu\\Desktop\\Rust\\hello-rust\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Miyu\\Desktop\\Rust\\hello-rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Miyu\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Miyu\\Desktop\\Rust\\hello-rust\\target\\rls\\debug\\deps\\libsmawk-c0c058b719872282.rmeta"},"prelude":{"crate_id":{"name":"smawk","disambiguator":[11305286503938732381,13239134502961689517]},"crate_root":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src","external_crates":[{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}}],"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":0,"byte_end":16733,"line_start":1,"line_end":531,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":0,"byte_end":16733,"line_start":1,"line_end":531,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":21},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":35},{"krate":0,"index":39},{"krate":0,"index":43}],"decl_id":null,"docs":" This crate implements various functions that help speed up dynamic\n programming, most importantly the SMAWK algorithm for finding row\n or column minima in a totally monotone matrix with *m* rows and\n *n* columns in time O(*m* + *n*). This is much better than the\n brute force solution which would take O(*mn*). When *m* and *n*\n are of the same order, this turns a quadratic function into a\n linear function.","sig":null,"attributes":[{"value":"/ This crate implements various functions that help speed up dynamic","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":0,"byte_end":70,"line_start":1,"line_end":1,"column_start":1,"column_end":71}},{"value":"/ programming, most importantly the SMAWK algorithm for finding row","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":71,"byte_end":140,"line_start":2,"line_end":2,"column_start":1,"column_end":70}},{"value":"/ or column minima in a totally monotone matrix with *m* rows and","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":141,"byte_end":208,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/ *n* columns in time O(*m* + *n*). This is much better than the","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":209,"byte_end":275,"line_start":4,"line_end":4,"column_start":1,"column_end":67}},{"value":"/ brute force solution which would take O(*mn*). When *m* and *n*","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":276,"byte_end":343,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ are of the same order, this turns a quadratic function into a","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":344,"byte_end":409,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ linear function.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":410,"byte_end":430,"line_start":7,"line_end":7,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":431,"byte_end":434,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":435,"byte_end":449,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":450,"byte_end":453,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Computing the column minima of an *m* âœ• *n* Monge matrix can be","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":454,"byte_end":523,"line_start":11,"line_end":11,"column_start":1,"column_end":68}},{"value":"/ done efficiently with `smawk_column_minima`:","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":524,"byte_end":572,"line_start":12,"line_end":12,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":573,"byte_end":576,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":577,"byte_end":584,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use smawk::{Matrix, smawk_column_minima};","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":585,"byte_end":630,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":631,"byte_end":634,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let matrix = vec![","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":635,"byte_end":657,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/     vec![3, 2, 4, 5, 6],","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":658,"byte_end":686,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/     vec![2, 1, 3, 3, 4],","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":687,"byte_end":715,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/     vec![2, 1, 3, 3, 4],","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":716,"byte_end":744,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/     vec![3, 2, 4, 3, 4],","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":745,"byte_end":773,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/     vec![4, 3, 2, 1, 1],","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":774,"byte_end":802,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ ];","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":803,"byte_end":809,"line_start":23,"line_end":23,"column_start":1,"column_end":7}},{"value":"/ let minima = vec![1, 1, 4, 4, 4];","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":810,"byte_end":847,"line_start":24,"line_end":24,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(smawk_column_minima(&matrix), minima);","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":848,"byte_end":901,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":902,"byte_end":909,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":910,"byte_end":913,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The `minima` vector gives the index of the minimum value per","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":914,"byte_end":978,"line_start":28,"line_end":28,"column_start":1,"column_end":65}},{"value":"/ column, so `minima[0] == 1` since the minimum value in the first","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":979,"byte_end":1047,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ column is 2 (row 1). Note that the smallest row index is returned.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1048,"byte_end":1118,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1119,"byte_end":1122,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Definitions","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1123,"byte_end":1140,"line_start":32,"line_end":32,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1141,"byte_end":1144,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Some of the functions in this crate only work on matrices that are","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1145,"byte_end":1215,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ *totally monotone*, which we will define below.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1216,"byte_end":1267,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1268,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ## Monotone Matrices","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1272,"byte_end":1296,"line_start":37,"line_end":37,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1297,"byte_end":1300,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ We start with a helper definition. Given an *m* âœ• *n* matrix `M`,","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1301,"byte_end":1372,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ we say that `M` is *monotone* when the minimum value of row `i` is","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1373,"byte_end":1443,"line_start":40,"line_end":40,"column_start":1,"column_end":71}},{"value":"/ found to the left of the minimum value in row `i'` where `i < i'`.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1444,"byte_end":1514,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1515,"byte_end":1518,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ More formally, if we let `rm(i)` denote the column index of the","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1519,"byte_end":1586,"line_start":43,"line_end":43,"column_start":1,"column_end":68}},{"value":"/ left-most minimum value in row `i`, then we have","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1587,"byte_end":1639,"line_start":44,"line_end":44,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1640,"byte_end":1643,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1644,"byte_end":1655,"line_start":46,"line_end":46,"column_start":1,"column_end":12}},{"value":"/ rm(0) â‰¤ rm(1) â‰¤ ... â‰¤ rm(m - 1)","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1656,"byte_end":1697,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1698,"byte_end":1705,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1706,"byte_end":1709,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ This means that as you go down the rows from top to bottom, the","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1710,"byte_end":1777,"line_start":50,"line_end":50,"column_start":1,"column_end":68}},{"value":"/ row-minima proceed from left to right.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1778,"byte_end":1820,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1821,"byte_end":1824,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The algorithms in this crate deal with finding such row- and","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1825,"byte_end":1889,"line_start":53,"line_end":53,"column_start":1,"column_end":65}},{"value":"/ column-minima.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1890,"byte_end":1908,"line_start":54,"line_end":54,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1909,"byte_end":1912,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Totally Monotone Matrices","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1913,"byte_end":1945,"line_start":56,"line_end":56,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1946,"byte_end":1949,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ We say that a matrix `M` is *totally monotone* when every","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":1950,"byte_end":2011,"line_start":58,"line_end":58,"column_start":1,"column_end":62}},{"value":"/ sub-matrix is monotone. A sub-matrix is formed by the intersection","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2012,"byte_end":2082,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/ of any two rows `i < i'` and any two columns `j < j'`.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2083,"byte_end":2141,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2142,"byte_end":2145,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This is often expressed as via this equivalent condition:","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2146,"byte_end":2207,"line_start":62,"line_end":62,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2208,"byte_end":2211,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2212,"byte_end":2223,"line_start":64,"line_end":64,"column_start":1,"column_end":12}},{"value":"/ M[i, j] > M[i, j']  =>  M[i', j] > M[i', j']","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2224,"byte_end":2272,"line_start":65,"line_end":65,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2273,"byte_end":2280,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2281,"byte_end":2284,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ for all `i < i'` and `j < j'`.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2285,"byte_end":2319,"line_start":68,"line_end":68,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2320,"byte_end":2323,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ ## Monge Property for Matrices","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2324,"byte_end":2358,"line_start":70,"line_end":70,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2359,"byte_end":2362,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ A matrix `M` is said to fulfill the *Monge property* if","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2363,"byte_end":2422,"line_start":72,"line_end":72,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2423,"byte_end":2426,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2427,"byte_end":2438,"line_start":74,"line_end":74,"column_start":1,"column_end":12}},{"value":"/ M[i, j] + M[i', j'] â‰¤ M[i, j'] + M[i', j]","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2439,"byte_end":2486,"line_start":75,"line_end":75,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2487,"byte_end":2494,"line_start":76,"line_end":76,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2495,"byte_end":2498,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ for all `i < i'` and `j < j'`. This says that given any rectangle","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2499,"byte_end":2568,"line_start":78,"line_end":78,"column_start":1,"column_end":70}},{"value":"/ in the matrix, the sum of the top-left and bottom-right corners is","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2569,"byte_end":2639,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ less than or equal to the sum of the bottom-left and upper-right","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2640,"byte_end":2708,"line_start":80,"line_end":80,"column_start":1,"column_end":69}},{"value":"/ corners.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2709,"byte_end":2721,"line_start":81,"line_end":81,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2722,"byte_end":2725,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ All Monge matrices are totally monotone, so it is enough to","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2726,"byte_end":2789,"line_start":83,"line_end":83,"column_start":1,"column_end":64}},{"value":"/ establish that the Monge property holds in order to use a matrix","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2790,"byte_end":2858,"line_start":84,"line_end":84,"column_start":1,"column_end":69}},{"value":"/ with the functions in this crate. If your program is dealing with","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2859,"byte_end":2928,"line_start":85,"line_end":85,"column_start":1,"column_end":70}},{"value":"/ unknown inputs, it can use [`monge::is_monge`] to verify that a","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2929,"byte_end":2996,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/ matrix is a Monge matrix.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":2997,"byte_end":3026,"line_start":87,"line_end":87,"column_start":1,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"monge","qualname":"::monge","value":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":13}],"decl_id":null,"docs":" Functions for generating and checking Monge arrays.","sig":null,"attributes":[{"value":"/ Functions for generating and checking Monge arrays.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":16735,"byte_end":16790,"line_start":1,"line_end":1,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":16791,"byte_end":16794,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The functions here are mostly meant to be used for testing","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":16795,"byte_end":16857,"line_start":3,"line_end":3,"column_start":1,"column_end":63}},{"value":"/ correctness of the SMAWK implementation.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":16858,"byte_end":16902,"line_start":4,"line_end":4,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17483,"byte_end":17491,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"is_monge","qualname":"::monge::is_monge","value":"pub fn is_monge<T: Ord + Copy, M: Matrix<T>>(&M) -> bool where\nWrapping<T>: Add<Output = Wrapping<T>>","parent":null,"children":[],"decl_id":null,"docs":" Verify that a matrix is a Monge matrix.","sig":null,"attributes":[{"value":"/ Verify that a matrix is a Monge matrix.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":16967,"byte_end":17010,"line_start":10,"line_end":10,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17011,"byte_end":17014,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ A [Monge matrix] \\(or array) is a matrix where the following","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17015,"byte_end":17079,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/ inequality holds:","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17080,"byte_end":17101,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17102,"byte_end":17105,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17106,"byte_end":17117,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ M[i, j] + M[i', j'] <= M[i, j'] + M[i', j]  for all i < i', j < j'","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17118,"byte_end":17188,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17189,"byte_end":17196,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17197,"byte_end":17200,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The inequality says that the sum of the main diagonal is less than","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17201,"byte_end":17271,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ the sum of the antidiagonal. Checking this condition is done by","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17272,"byte_end":17339,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ checking *n* âœ• *m* submatrices, so the running time is O(*mn*).","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17340,"byte_end":17409,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17410,"byte_end":17413,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [Monge matrix]: https://en.wikipedia.org/wiki/Monge_array","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\monge.rs","byte_start":17414,"byte_end":17475,"line_start":23,"line_end":23,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3604,"byte_end":3610,"line_start":106,"line_end":106,"column_start":11,"column_end":17},"name":"Matrix","qualname":"::Matrix","value":"Matrix<T: Copy>","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25}],"decl_id":null,"docs":" Minimal matrix trait for two-dimensional arrays.","sig":null,"attributes":[{"value":"/ Minimal matrix trait for two-dimensional arrays.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3196,"byte_end":3248,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3249,"byte_end":3252,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This provides the functionality needed to represent a read-only","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3253,"byte_end":3320,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ numeric matrix. You can query the size of the matrix and access","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3321,"byte_end":3388,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"/ elements. Modeled after [`ndarray::Array2`] from the [ndarray","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3389,"byte_end":3454,"line_start":101,"line_end":101,"column_start":1,"column_end":66}},{"value":"/ crate](https://crates.io/crates/ndarray).","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3455,"byte_end":3500,"line_start":102,"line_end":102,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3501,"byte_end":3504,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Enable the `ndarray` Cargo feature if you want to use it with","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3505,"byte_end":3570,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ `ndarray::Array2`.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3571,"byte_end":3593,"line_start":105,"line_end":105,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3664,"byte_end":3669,"line_start":108,"line_end":108,"column_start":8,"column_end":13},"name":"nrows","qualname":"::Matrix::nrows","value":"pub fn nrows(&Self) -> usize","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Return the number of rows.\n","sig":null,"attributes":[{"value":"/ Return the number of rows.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3626,"byte_end":3656,"line_start":107,"line_end":107,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3732,"byte_end":3737,"line_start":110,"line_end":110,"column_start":8,"column_end":13},"name":"ncols","qualname":"::Matrix::ncols","value":"pub fn ncols(&Self) -> usize","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Return the number of columns.\n","sig":null,"attributes":[{"value":"/ Return the number of columns.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3691,"byte_end":3724,"line_start":109,"line_end":109,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3795,"byte_end":3800,"line_start":112,"line_end":112,"column_start":8,"column_end":13},"name":"index","qualname":"::Matrix::index","value":"pub fn index(&Self, usize, usize) -> T","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":" Return a matrix element.\n","sig":null,"attributes":[{"value":"/ Return a matrix element.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3759,"byte_end":3787,"line_start":111,"line_end":111,"column_start":5,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5472,"byte_end":5488,"line_start":170,"line_end":170,"column_start":8,"column_end":24},"name":"smawk_row_minima","qualname":"::smawk_row_minima","value":"pub fn smawk_row_minima<T: PartialOrd + Copy, M: Matrix<T>>(&M) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compute row minima in O(*m* + *n*) time.","sig":null,"attributes":[{"value":"/ Compute row minima in O(*m* + *n*) time.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4844,"byte_end":4888,"line_start":153,"line_end":153,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4889,"byte_end":4892,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ This implements the SMAWK algorithm for finding row minima in a","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4893,"byte_end":4960,"line_start":155,"line_end":155,"column_start":1,"column_end":68}},{"value":"/ totally monotone matrix.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4961,"byte_end":4989,"line_start":156,"line_end":156,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4990,"byte_end":4993,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ The SMAWK algorithm is from Agarwal, Klawe, Moran, Shor, and","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4994,"byte_end":5058,"line_start":158,"line_end":158,"column_start":1,"column_end":65}},{"value":"/ Wilbur, *Geometric applications of a matrix searching algorithm*,","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5059,"byte_end":5128,"line_start":159,"line_end":159,"column_start":1,"column_end":70}},{"value":"/ Algorithmica 2, pp. 195-208 (1987) and the code here is a","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5129,"byte_end":5190,"line_start":160,"line_end":160,"column_start":1,"column_end":62}},{"value":"/ translation [David Eppstein's Python code][pads].","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5191,"byte_end":5244,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5245,"byte_end":5248,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ [pads]: https://github.com/jfinkels/PADS/blob/master/pads/smawk.py","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5249,"byte_end":5319,"line_start":163,"line_end":163,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5320,"byte_end":5323,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ Running time on an *m* âœ• *n* matrix: O(*m* + *n*).","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5324,"byte_end":5380,"line_start":165,"line_end":165,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5381,"byte_end":5384,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5385,"byte_end":5397,"line_start":167,"line_end":167,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5398,"byte_end":5401,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ It is an error to call this on a matrix with zero columns.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5402,"byte_end":5464,"line_start":169,"line_end":169,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6530,"byte_end":6549,"line_start":200,"line_end":200,"column_start":8,"column_end":27},"name":"smawk_column_minima","qualname":"::smawk_column_minima","value":"pub fn smawk_column_minima<T: PartialOrd + Copy, M: Matrix<T>>(&M)\n-> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compute column minima in O(*m* + *n*) time.","sig":null,"attributes":[{"value":"/ Compute column minima in O(*m* + *n*) time.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5899,"byte_end":5946,"line_start":183,"line_end":183,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5947,"byte_end":5950,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ This implements the SMAWK algorithm for finding column minima in a","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":5951,"byte_end":6021,"line_start":185,"line_end":185,"column_start":1,"column_end":71}},{"value":"/ totally monotone matrix.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6022,"byte_end":6050,"line_start":186,"line_end":186,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6051,"byte_end":6054,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ The SMAWK algorithm is from Agarwal, Klawe, Moran, Shor, and","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6055,"byte_end":6119,"line_start":188,"line_end":188,"column_start":1,"column_end":65}},{"value":"/ Wilbur, *Geometric applications of a matrix searching algorithm*,","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6120,"byte_end":6189,"line_start":189,"line_end":189,"column_start":1,"column_end":70}},{"value":"/ Algorithmica 2, pp. 195-208 (1987) and the code here is a","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6190,"byte_end":6251,"line_start":190,"line_end":190,"column_start":1,"column_end":62}},{"value":"/ translation [David Eppstein's Python code][pads].","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6252,"byte_end":6305,"line_start":191,"line_end":191,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6306,"byte_end":6309,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ [pads]: https://github.com/jfinkels/PADS/blob/master/pads/smawk.py","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6310,"byte_end":6380,"line_start":193,"line_end":193,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6381,"byte_end":6384,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ Running time on an *m* âœ• *n* matrix: O(*m* + *n*).","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6385,"byte_end":6441,"line_start":195,"line_end":195,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6442,"byte_end":6445,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6446,"byte_end":6458,"line_start":197,"line_end":197,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6459,"byte_end":6462,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ It is an error to call this on a matrix with zero rows.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":6463,"byte_end":6522,"line_start":199,"line_end":199,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9460,"byte_end":9480,"line_start":293,"line_end":293,"column_start":8,"column_end":28},"name":"online_column_minima","qualname":"::online_column_minima","value":"pub fn online_column_minima<T: Copy + PartialOrd,\n                            M: Fn(&[(usize, T)], usize, usize) ->\n                            T>(T, usize, M) -> Vec<(usize, T)>","parent":null,"children":[],"decl_id":null,"docs":" Compute upper-right column minima in O(*m* + *n*) time.","sig":null,"attributes":[{"value":"/ Compute upper-right column minima in O(*m* + *n*) time.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8393,"byte_end":8452,"line_start":267,"line_end":267,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8453,"byte_end":8456,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ The input matrix must be totally monotone.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8457,"byte_end":8503,"line_start":269,"line_end":269,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8504,"byte_end":8507,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ The function returns a vector of `(usize, T)`. The `usize` in the","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8508,"byte_end":8577,"line_start":271,"line_end":271,"column_start":1,"column_end":70}},{"value":"/ tuple at index `j` tells you the row of the minimum value in","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8578,"byte_end":8642,"line_start":272,"line_end":272,"column_start":1,"column_end":65}},{"value":"/ column `j` and the `T` value is minimum value itself.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8643,"byte_end":8700,"line_start":273,"line_end":273,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8701,"byte_end":8704,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The algorithm only considers values above the main diagonal, which","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8705,"byte_end":8775,"line_start":275,"line_end":275,"column_start":1,"column_end":71}},{"value":"/ means that it computes values `v(j)` where:","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8776,"byte_end":8823,"line_start":276,"line_end":276,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8824,"byte_end":8827,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8828,"byte_end":8839,"line_start":278,"line_end":278,"column_start":1,"column_end":12}},{"value":"/ v(0) = initial","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8840,"byte_end":8858,"line_start":279,"line_end":279,"column_start":1,"column_end":19}},{"value":"/ v(j) = min { M[i, j] | i < j } for j > 0","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8859,"byte_end":8903,"line_start":280,"line_end":280,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8904,"byte_end":8911,"line_start":281,"line_end":281,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8912,"byte_end":8915,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ If we let `r(j)` denote the row index of the minimum value in","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8916,"byte_end":8981,"line_start":283,"line_end":283,"column_start":1,"column_end":66}},{"value":"/ column `j`, the tuples in the result vector become `(r(j), M[r(j),","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":8982,"byte_end":9052,"line_start":284,"line_end":284,"column_start":1,"column_end":71}},{"value":"/ j])`.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9053,"byte_end":9062,"line_start":285,"line_end":285,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9063,"byte_end":9066,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The algorithm is an *online* algorithm, in the sense that `matrix`","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9067,"byte_end":9137,"line_start":287,"line_end":287,"column_start":1,"column_end":71}},{"value":"/ function can refer back to previously computed column minima when","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9138,"byte_end":9207,"line_start":288,"line_end":288,"column_start":1,"column_end":70}},{"value":"/ determining an entry in the matrix. The guarantee is that we only","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9208,"byte_end":9277,"line_start":289,"line_end":289,"column_start":1,"column_end":70}},{"value":"/ call `matrix(i, j)` after having computed `v(i)`. This is","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9278,"byte_end":9339,"line_start":290,"line_end":290,"column_start":1,"column_end":62}},{"value":"/ reflected in the `&[(usize, T)]` argument to `matrix`, which grows","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9340,"byte_end":9410,"line_start":291,"line_end":291,"column_start":1,"column_end":71}},{"value":"/ as more and more values are computed.","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":9411,"byte_end":9452,"line_start":292,"line_end":292,"column_start":1,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4141,"byte_end":4144,"line_start":121,"line_end":121,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":3141,"byte_end":3146,"line_start":93,"line_end":93,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Miyu\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\smawk-0.3.1\\src\\lib.rs","byte_start":4141,"byte_end":4144,"line_start":121,"line_end":121,"column_start":29,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":6772},"to":{"krate":0,"index":21}}]}