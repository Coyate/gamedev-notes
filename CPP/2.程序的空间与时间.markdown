---
layout: post
title: "程序的空间与时间"
date: 2018-10-25 20:24:39
update: 
categories: C++
img:
---

- [程序内存](#程序内存)
	- [堆与栈](#堆与栈)
	- [作用域与生命周期](#作用域与生命周期)
	- [栈溢出与内存泄露](#栈溢出与内存泄露)
- [编译，链接，库](#编译链接库)
	- [源文件，头文件](#源文件头文件)
	- [预处理](#预处理)
	- [编译 & 链接](#编译--链接)
	- [`main` 函数前后](#main-函数前后)
- [存储](#存储)
	- [大小端](#大小端)
	- [`sizeof`](#sizeof)
	- [内存对齐](#内存对齐)
		- [手动对齐](#手动对齐)
		- [位域](#位域)
 

### 程序内存

程序内存分为两部分，一部分是程序在运行时（`runtime`），系统分配给程序的内存，包括堆 (`heap`) 和栈 (`stack`) 两个部分，另一部分是程序的可执行文件中存储的一些内容，会被系统从硬盘装载到内存中里，称为可执行文件映像。

可执行文件（ `.exe`, 也包括库 `.dll`, `.lib`）的格式如下：

段 | 名称 | 功能
--- | --- | ---
File Header | 文件头 | 描述整个文件的文件属性（文件是静态链接还是动态连接，入口地址、目标硬件、目标操作系统等）
.text section | 代码段 | 程序语句编译成的机器代码 
.data section | 数据段 | 已初始化的全局变量和静态变量
.bss section | BSS 段（Block Started by Symbol）| 未初始化的全局变量和局部静态变量
.rodata section | 只读数据段 (Read Only Data) | 存放只读数据，一般是程序里面的只读变量（如 const 修饰的变量）和字符串常量

#### 堆与栈

栈是由操作系统自动分配释放的，存放局部变量的值，函数调用的相关信息，一般为 2MB 大小。通常在函数内部声明一个变量就是存放在栈上。
  
堆是由操作系统管理并维护的内存，通常会有数百兆，由编程者主动申请（`new` , `malloc`, 或使用其他向操作系统申请内存的方法 ），需要编程者自己管理合适释放。

<details><summary>变量存放示例 </summary>

```cpp

// .data 段
int g_data_i1 = 10;
double g_data_d = 20.0;
int g_data_i2 = 30;

static int gs_data_i1 = 1;
static double gs_data_d = 1;
static int gs_data_i2 = 1;

// .bss 段
int g_bss_i1;
double g_bss_d;
int g_bss_i2;

static int gs_bss_i1;
static double gs_bss_d;
static int gs_bss_i2;

// .rodata 段

const int g_rodata_i1 = 12;
const double g_rodata_d = 22.0;
const int g_rodata_i2 = 32;

void func() {
	static int ls_data_i1 = 15;
	static double ls_data_d = 25;
	static int ls_bss_i2;
	static int ls_bss_i3;

	cout << ".data段 local static 数据" << endl;
	cout << "i1 : \t" << ls_data_i1 << "\t" << &ls_data_i1 << endl;
	cout << "d : \t" << ls_data_d << "\t" << &ls_data_d << endl;

	cout << ".bss段 local static 数据" << endl;
	cout << "i2 : \t" << ls_bss_i2 << "\t" << &ls_bss_i2 << endl;
	cout << "i3 : \t" << ls_bss_i3 << "\t" << &ls_bss_i3 << endl;
	cout << endl;
}
int main() {


	cout << ".data段 global 已初始化" << endl;
	cout << "i1 : \t" << g_data_i1 << "\t" << &g_data_i1 << endl;
	cout << "d : \t" << g_data_d << "\t" << &g_data_d << endl;
	cout << "i2 : \t" << g_data_i2 << "\t" << &g_data_i2 << endl;
	cout << endl;

	cout << ".data段 global static 已初始化" << endl;
	cout << "i1 : \t" << gs_data_i1 << "\t" << &gs_data_i1 << endl;
	cout << "d : \t" << gs_data_d << "\t" << &gs_data_d << endl;
	cout << "i2 : \t" << gs_data_i2 << "\t" << &gs_data_i2 << endl;
	cout << endl;

	cout << ".rodata段 global 数据" << endl;
	cout << "i1 : \t" << g_rodata_i1 << "\t" << &g_rodata_i1 << endl;
	cout << "d : \t" << g_rodata_d << "\t" << &g_rodata_d << endl;
	cout << "i2 : \t" << g_rodata_i2 << "\t" << &g_rodata_i2 << endl;
	cout << endl;

	// .bss 段初始化
	g_bss_i1 = 11;
	g_bss_d = 21.0;
	g_bss_i2 = 31;

	gs_bss_i1 = 3;
	gs_bss_d = 5;
	gs_bss_i1 = 7;

	/// bss
	cout << ".bss段 global 初始化后 " << endl;
	cout << "i1 : \t" << g_bss_i1 << "\t" << &g_bss_i1 << endl;
	cout << "d : \t" << g_bss_d << "\t" << &g_bss_d << endl;
	cout << "i2 : \t" << g_bss_i2 << "\t" << &g_bss_i2 << endl;
	cout << endl;


	cout << ".bss段 global static 初始化后 " << endl;
	cout << "i1 : \t" << gs_bss_i1 << "\t" << &gs_bss_i1 << endl;
	cout << "d : \t" << gs_bss_d << "\t" << &gs_bss_d << endl;
	cout << "i2 : \t" << gs_bss_i2 << "\t" << &gs_bss_i2 << endl;
	cout << endl;

	func();

	int stack_i1 = 13;
	double stack_d = 23.0;
	int stack_i2 = 33;

	int *heap_i1 = new int(14);
	double *heap_d = new double(24.0);
	int *heap_i2 = new int(34);

	cout << "stack 栈 local 数据" << endl;
	cout << "i1 : \t" << stack_i1 << "\t" << &stack_i1 << endl;
	cout << "d : \t" << stack_d << "\t" << &stack_d << endl;
	cout << "i2 : \t" << stack_i2 << "\t" << &stack_i2 << endl;
	cout << endl;

	cout << "stack 栈 local 指针" << endl;
	cout << "i1 : \t" << "heap_i1" << "\t" << &heap_i1 << endl;
	cout << "d : \t" << "heap_d" << "\t" << &heap_d << endl;
	cout << "i2 : \t" << "heap_i2" << "\t" << &heap_i2 << endl;
	cout << endl;

	cout << "heap 堆 new 数据" << endl;
	cout << "i1 : \t" << *heap_i1 << "\t" << heap_i1 << endl;
	cout << "d : \t" << *heap_d << "\t" << heap_d << endl;
	cout << "i2 : \t" << *heap_i2 << "\t" << heap_i2 << endl;
	cout << endl;
	
	
	char l_stack_char_a[] = "aaaaa";
	char *l_rodata_char_b = "bbbbb";
	// l_rodata_char_b[2] = '5'; // 写入异常
	const char* l_rodata_a = "abc";
	const char* l_rodata_b = "abc";

	cout << ".stack段 local char 使用 [] 声明" << endl;
	printf("l_char_a\t%X \n", l_stack_char_a);
	cout << ".rodata段 local char* 也不能更改" << endl;
	printf("l_rodata_char_b\t%X \n", l_rodata_char_b);
	
	cout << ".rodata段 const char*" << endl;
	printf("l_rodata_a\t%X \n", l_rodata_a);
	printf("l_rodata_b\t%X \n", l_rodata_b);


	return 0;
}

```

</details>


#### 作用域与生命周期

作用域是按程序块来划分的，块 `Block` 就是 `{ }` ，作用域大体有两点

- 外层作用域的变量可以在内层访问
- 内层作用域如果声明了外层的同名变量，则优先使用内层的变量，这个特性称为隐藏

对象从创建到销毁的整个时间段称为对象的生命周期，局部对象的生命周期与其作用域相关。

| 对象类型         | 语法                    | 存放位置                                   | 生命周期                                          |
|--------------|-----------------------|----------------------------------------|-----------------------------------------------|
| 全局对象         | `main 函数之外定义            | 已初始化的在 .rodata，未初始化的在 .bss段            | 程序开始时（main函数之前）创建，赋值语句时初始化，结束时（main函数之后）销毁    |
| 全局 `static` 对象 | `main`函数之外加 `static`      | .bss 段                                 | 同上                                            |
| 局部 `static` 对象 | 函数内部加 `static`          | .bss 段 | 声明时创建，（默认值为 0，已经预留了位置）                        |
| 只读对象         | `const`, `char* a= "..."` | .rodata段                               |                                          |
| 局部对象         | 函数内部定义，不使用 `new` / `malloc`                 | stack                                  | 定义时创建，离开作用域时销毁                               |
| 动态分配对象       | 使用 `new` / `malloc`       |  heap               | 申请时创建，释放时销毁，与作用域无关                            |

因为编译器优化，存放在可执行文件映像段里的变量可能会提前被创建
- 实验中未初始化的局部 static 被放到了 .data段…
 
#### 栈溢出与内存泄露

操作堆栈内存比较常见的问题就是栈溢出和内存泄漏。

栈的大小是固定的，若没有手动更改，一般32位机器是 1MB，64位是 2MB。这么点大的内存，不小心用完的时候就可能发生栈溢出 (stack overflow) 的错误：

1. 局部数组过大。局部数组存放在栈上，局部的变量太多导致栈溢出。
2. 递归调用层次太多。调用函数时会将函数相关的寄存器变量压入栈中，递归会调用多层函数，压栈次数太多时，也会导致堆栈溢出。
3. 指向栈的指针或数组越界，指向了栈外不能读写的位置，会导致栈溢出，该错误也可能被称为段错误 (segment fault)

内存泄漏 (memory leak)：指的是分配的堆内存忘记释放，造成系统内存的浪费，可能会拖慢程序的运行或造成系统崩溃。

<details><summary>内存泄漏示例</summary>


```cpp

int main() {
	int *p = new int[10000000];
	return 0;  // 忘了释放
}

```
> -**`new` 和 `delete`, `malloc` 和 `free` 必须要成双成对！(最好是不要手动管理内存)**
</details>


### 编译，链接，库

从时间上来看，C++代码生成程序有以下几个步骤：


1. 写代码，包括头文件(`.h`, `.hpp`)和源文件(`.cpp`)
2. 预处理，预处理器 (Preprocessor)  处理如 `#include`、`#define` 等带 `#`号的预处理指令）
3. 编译，将程序翻译成目标文件，即机器可以执行的汇编代码
4. 链接，链接器将目标文件里的符号相互链接起来


平台 | 可执行文件 | 目标文件 | 动态库/共享对象 | 静态库
---|---|---|---|---
Windows|exe|obj|dll|lib
Unix/Linux|ELF、out|o|so|a

#### 源文件，头文件

C++的源文件，头文件体系是延续 C 语言的。一个函数只要声明了就可以使用，编译器不关心函数的实现在哪，实现是由链接器去查找的。编译器将函数与变量统称为符号，只要符号都有相应的声明，编译器就能生成目标文件。

在有多个源文件时，只需每个源文件用 `#include` 包含了头文件的声明，在链接后源文件就可以使用相应的符号，而符号的具体实现（函数的定义，跨文件变量的存储）只需要一份就行了，可以节省内存。

- 头文件和源文件也可以看成一种封装，头文件是给用户的 API，源文件是具体实现
- 更改源文件的实现后，用户只需要重新链接，使得更新库不需要重新编译代码，可以减少编译时间
- `inline` 函数需要放在头文件中
- `template` 需要放在头文件中

#### 预处理
	
预处理器是用来处理一些预编译指令的，例如 ：

- `#define`，将宏定义直接进行文字级别的替换
- `#include`，将头文件置入源文件，之后再进行编译
- `#ifdef`, 只取有相应宏定义的部分代码进行编译


<details>  <summary> 使用预处理进行头文件保护 </summary>

```cpp
// 防止一个头文件被源文件包含多次（会有同样符号的多次声明），只能按整个文件进行保护
// #pragma once

// 功能同上，但可以分部分保护
// #ifndef DATA_H
// #define DATA_H
// #endif

```

</details>

#### 编译 & 链接

编译是将源代码翻译成机器码，也就是目标文件，一个源文件生成一个目标文件，分离编译，在编译时互相不可知。编译好的目标文件其实已经是可以执行的文件了，但其中的符号表可能还没有确定。

符号表是存放的是符号（变量和函数）及其对应的地址。若调用了其他头文件中的函数，或者使用了其他源文件中的变量，就需要靠链接器定位到这些符号的位置。链接器处理好目标文件的符号表之后，程序就可以执行了。


#### `main` 函数前后

`main` 函数整个程序只能有一个，是程序入口，`main` 函数可以不写 `return` 语句，会隐式返回0

<details><summary> main 函数的写法 </summary>


```cpp

int main() {}
int main(int argc, char *argv[]) {} // argc 是参数数量，argv 保留参数内容
int main(int argc, char **argv) {} // argv[0]默认保存程序的名字，argc最小值为1

```

</details>

之前在生命周期处就提到 `main` 函数之前有一些操作。程序并不是从 `main` 函数开始运行的，操作系统，C++ 运行库还要做一些额外的操作来保障程序的运行：

1. 操作系统创建进程，装载器装载程序映像，把控制权交给程序的入口函数，该入口函数是由链接器指定的 C++ 运行库启动函数（由创建工程时的 `Console` 等配置决定）
2. C++ 运行库启动函数
	1. 初始化栈和堆，设置栈内存，初始化堆管理算法（不用每次都向操作系统申请内存）
	2. 打开标准输入，输出，错误流（`stdin`, `stdout`, `stderr`）
	3. 获取命令行参数和环境变量
	4. 初始化全局和静态变量（.data 段），将未初始化部分的赋初值（.bss段，赋各种类型的0），调用全局/静态对象的构造函数
	5. 注册上述对象的析构函数（使用 `onexit()` 注册，称为终止处理程序，会在 `main` 函数之后执行）	
3. 将 `argc`，`argv` 传递给 `main` 函数，运行 `main` 函数
4.  `main` 函数之后
	1. 调用注册了的析构函数析构全局对象
	2. 释放堆内存，关闭标准输入，输出，错误流，释放其他资源
	3. 调用操作系统的 Exit API 退出进程

### 存储

#### 大小端

大小端（Endian）指的是数据在计算机中的存放顺序。小端法是**高字节放在高地址**，大端相反，小端法存储 0x12345678 如下，高位存放在高地址：

| 数据   | 地址    |
|------|-------|
| 0x12 | 1004H |
| 0x34 | 1003H |
| 0x56 | 1002H |
| 0x78 | 1001H |

一般来说，Windows，linux 都是小端模式，Mac 是大端模式。

<details><summary>判断大小端</summary>

```cpp

union
{
	unsigned char a;
	unsigned int i;
}u;

int main() {
	u.i = 0x12345678;
	//cout << hex << u.i << endl;
	//cout << hex << int(u.a) << endl;

	if (u.a == 0x78)
		cout << "little endian" << endl;
	else if (u.a == 0x12)
		cout << "big endian" << endl;
	else 
		cout << "what the heck?" << endl;
	return 0;
}


```

</details>

#### `sizeof`

`sizeof(...)` 是单目运算符，其返回值为 unsigned int，在编译时计算其参数所需的字节大小，参数可以是以下类型：

- 类型：该类型所占空间的大小
- 数组：只支持静态数组，返回数组的总空间大小
- 指针：返回指针的大小
- 表达式：表达式结果类型的大小（与 `decltype` 一样，不对表达式进行计算）
	- `sizeof(*p)` 是求指针指向对象的类型大小，即使指针未初始化也是安全的
	- `sizeof(++i)` 括号内的 `++` 不执行

`sizeof` 需要注意的地方：

- **不能**对函数类型，不完整类型求值
- 由于在编译时计算，`sizeof` 不能得到动态分配内存空间的大小
- 运行时不存在 `sizeof` 语句，已经在编译期被替换成字面值常量
	- 该字面值常量可以用来声明数组：`int arr[ sizeof(ia)];`
- 当数组传入函数退化成指针时，`sizeof` 对数组名求值返回的是指针的大小

`strlen` 与 `sizeof` 的比较：`strlen` 是函数，参数必须是 `(const) char *`，运行时计算，不安全

<details><summary>sizeof 示例</summary>


```cpp

// x64
	
char* ss1 = "0123456789";
char  ss2[] = "0123456789";
char  ss3[100] = "0123456789";
int   ss4[100];
char* ss5 = (char *)malloc(100);
int*  ss6 = (int *)malloc(100);

cout << "ss1 : " << sizeof(ss1) << endl;	// 8
cout << "ss2 : " << sizeof(ss2) << endl;	// 11
cout << "ss3 : " << sizeof(ss3) << endl;	// 100
cout << "ss4 : " << sizeof(ss4) << endl;	// 400
cout << "ss5 : " << sizeof(ss5) << endl;	// 8
cout << "ss6 : " << sizeof(ss6) << endl;	// 8
cout << endl;

// stack 段， 两个不一样的静态数组
char str1[] = "fooaaa";		// 7
char str2[] = "fooaaa";		// 7

// .rodata 段，两个指针指向指向同一位置，.rodata 里实际上只存放了一个常量字符串数组
char* str3 = "fooaaa";		// 8
char* str4 = "fooaaa";		// 8

cout << "str1 : " << sizeof(str1) << endl;
cout << "str2 : " << sizeof(str2) << endl;
cout << "str3 : " << sizeof(str3) << endl;
cout << "str4 : " << sizeof(str4) << endl;

```

</details>

#### 内存对齐

内存对齐是编译期决定的事情，其基本原则是结构体内的成员和最长的成员对齐。

> 为什么要对齐内存？

数据从硬盘取出，经过内存，几级 Cache，放到 CPU 寄存器里，中途要经过数次的传输操作。在 CPU 流水线上，并不是一次取单个字节，而且一次取一批数据，通常是 2 的幂（32/64 字节）。如果数据没有按幂对齐，那同一个变量可能会需要两次或多次取指令。所以数据都要对齐，用空间换取更少的 IO 次数。

内存对齐需要注意的情况：

- 空类大小为 1，标准禁止对象大小为 0，因为两个不同的对象需要不同的地址表示
- 如果结构体中有嵌入结构体，包括嵌入结构体的成员，按所有成员中最长的对齐
- 如果内有数组，数组也要按最长的成员对齐
- [虚函数，虚指针，虚继承]((#类的布局))

<details><summary>内存对齐示例</summary>

```cpp

struct A {
};	// 空类，大小为1

struct B {
	int i;		// 4 字节
	double d;	// 8 字节
	short s;	// 2 字节
};	// 8 * 3 = 24 字节

struct C {
	double d;	// 8 字节
	int i;		// 4 字节
	short s;	// 2 字节 （2 + 4 = 6，可以放到同一行的 8 字节里存储
}; // 8 * 2 = 16 字节（通过合理地声明数据成员可以减少内存使用）

struct D {
	bool b1;	// 1 字节，由于 C 中最长成员为 8 字节，padding 到 8 字节
	C c;		// 16 字节，按 8 字节 对齐
	bool b2;	// 同 b1
};	// 8 + 16 + 8 = 32 字节

// x64
struct E {
	char * pc;	// 8 字节
	char r[9];	// 按 8 字节对齐，一行可以存 8 个 char，多出来的一个 char 单独占一行
};	// 8 * 3 = 24 字节


// Union 按最长的成员计算大小
union U
{
	bool b;		// 1 字节
	char c;		// 1 字节
	int i;		// 4 字节
}; // 4 字节


int main() {
	cout << "A : " << sizeof(A) << endl;
	cout << "B : " << sizeof(B) << endl;
	cout << "C : " << sizeof(C) << endl;
	cout << "D : " << sizeof(D) << endl;
	cout << "E : " << sizeof(E) << endl;
	cout << "F : " << sizeof(U) << endl;
	return 0;
}


```

</details>



##### 手动对齐

`#pragma pack(n)` 会强制设定 `struct`、`union`, `class` 按 `n` 字节对齐。由于 `#pragma pack` 会影响整个程序的对齐方式，必须使用 `#pragma pack(push)` 和 `#pragma pack(pop)` 来防止其他程序块受到干扰。

<details><summary>#pragma pack(n) 使用</summary> 


```cpp
// 测试时解除掉 #pragma 的注释
// #pragma pack(push)  // 保存对齐状态
// #pragma pack(4)     // 设定为 4 字节对齐

struct A
{
	char c;			// 1 字节，padding 到 4 字节
	double d;		// 8 字节，拆成两个 4 字节
	int i;			// 4 字节
};					// 总共 4 * 4 = 16 字节

// #pragma pack(pop)   // 恢复对齐状态

// 按最宽成员，8 字节对齐
struct B
{
	char c;			// 1 字节， padding 到 8 字节
	double d;		// 8 字节
	int i;			// 4 字节， padding 到 8字节
};					// 总共 8 * 3 = 24 字节

int main() {
	
	cout << sizeof(A) << endl;	// 16
	cout << sizeof(B) << endl;	// 24
	return 0;
}
```

</details>

##### 位域

在类和结构体中，可以将非静态数据成员定义为位域（bit-field），用一定数量的二进制位来存储数据。

- 位域在内存中的布局是与机器有关的，通常情况下，连续存放的同类型位域变量会被压缩到一起存储
- 位域的类型必须是整数型或枚举类型，带符号类型位域的行为根据编译器的具体实现而定
- 取地址运算符 `&` 不能作用于位域，指针无法指向位域

<details><summary>位域示例</summary>

```cpp
// 最宽的是 int, 4 字节
struct C {
	short s;			// 2 字节
	char c;				// 1 字节
	int b1 : 7;			// 1 位
	int b2 : 1;			// 4 位
	int b3 : 4;			// 7 位
						// 一共 12 位， 放在 4 字节里存储
	unsigned char uc;	// 1 字节
	short c2 : 5;		// 5 位，放在 2 字节里存储
};	// 一共 12 字节

//	| 0	| 1	| 2	| 3	|	short + char
//	|	s	| c	| -	|

//	| 4	| 5	| 6	| 7	|	int
//	|b1,2|b3| -	| -	|

//	| 8	| 9	| 10| 11|	unsigned char + short
//	| uc|	c2	| -	|

int main() {
	cout << sizeof(C) << endl;	// 12
	return 0;
}

```

</details>
