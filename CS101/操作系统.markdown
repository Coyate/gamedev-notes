### 操作系统
进程和线程（协程就是unity一种多线程的机制，用yield return返回）
操作系统的页表机制。
一个线程几个栈？
线程和进程
虚拟内存机制，虚存与物理内存的映射；
进程间通讯
线程同步，有几种方法
问了对sleep的理解。（进程中的概念）


线程用堆栈内存吗

https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/08.04.md

### 段页 
TLB

https://blog.csdn.net/guoweimelon/article/details/50853719

https://blog.csdn.net/sunmc1204953974/article/details/46859785
https://blog.csdn.net/hguisu/article/details/5713164




dll加载顺序，dll和lib比较

https://blog.csdn.net/huapeng_guo/article/details/7610417
https://blog.csdn.net/zhounanzhaode/article/details/50084305

### 内核态

https://www.jianshu.com/p/3bb1cdd44ef0
https://www.cnblogs.com/zemliu/p/3695503.html
https://blog.csdn.net/liuyueyue0921/article/details/48225533

https://www.cnblogs.com/bakari/p/5520860.html

### 处理机调度

https://blog.csdn.net/wz1226864411/article/details/78826361
https://blog.csdn.net/ly601579033/article/details/47753327
https://www.cnblogs.com/gaopeng527/p/5260897.html



### CPU利用率
https://www.cnblogs.com/zhengah/p/4942916.html



### 文件系统

* Windows：FCB 表 + FAT + 位图
* Unix：inode + 混合索引 + 成组链接

### 主机字节序与网络字节序

#### 主机字节序（CPU 字节序）

##### 概念

主机字节序又叫 CPU 字节序，其不是由操作系统决定的，而是由 CPU 指令集架构决定的。主机字节序分为两种：

* 大端字节序（Big Endian）：高序字节存储在低位地址，低序字节存储在高位地址
* 小端字节序（Little Endian）：高序字节存储在高位地址，低序字节存储在低位地址

##### 存储方式

32 位整数 `0x12345678` 是从起始位置为 `0x00` 的地址开始存放，则：

内存地址 | 0x00 | 0x01 | 0x02 | 0x03
---|---|---|---|---
大端|12|34|56|78
小端|78|56|34|12


<details><summary>大端小端图片</summary>

![大端序](images/CPU-Big-Endian.svg.png)
![小端序](images/CPU-Little-Endian.svg.png)

</details>

##### 判断大端小端

<details><summary>判断大端小端</summary>

可以这样判断自己 CPU 字节序是大端还是小端：

```cpp
#include <iostream>
using namespace std;

int main()
{
	int i = 0x12345678;

	if (*((char*)&i) == 0x12)
		cout << "大端" << endl;
	else	
		cout << "小端" << endl;

	return 0;
}
```

</details>

##### 各架构处理器的字节序

* x86（Intel、AMD）、MOS Technology 6502、Z80、VAX、PDP-11 等处理器为小端序；
* Motorola 6800、Motorola 68000、PowerPC 970、System/370、SPARC（除 V9 外）等处理器为大端序；
* ARM（默认小端序）、PowerPC（除 PowerPC 970 外）、DEC Alpha、SPARC V9、MIPS、PA-RISC 及 IA64 的字节序是可配置的。

#### 网络字节序

网络字节顺序是 TCP/IP 中规定好的一种数据表示格式，它与具体的 CPU 类型、操作系统等无关，从而可以保重数据在不同主机之间传输时能够被正确解释。

网络字节顺序采用：大端（Big Endian）排列方式。

### 页面置换算法

在地址映射过程中，若在页面中发现所要访问的页面不在内存中，则产生缺页中断。当发生缺页中断时，如果操作系统内存中没有空闲页面，则操作系统必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。而用来选择淘汰哪一页的规则叫做页面置换算法。

#### 分类

* 全局置换：在整个内存空间置换
* 局部置换：在本进程中进行置换

#### 算法

全局：
* 工作集算法
* 缺页率置换算法

局部：
* 最佳置换算法（OPT）
* 先进先出置换算法（FIFO）
* 最近最久未使用（LRU）算法
* 时钟（Clock）置换算法